name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  # keep these in sync with docker-compose/.env.dev values
  POSTGRES_DB: postgres
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: strongpassword
  DJANGO_SETTINGS_MODULE: Django_TechYatra.settings.dev

jobs:
  test-and-build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U ${{ env.POSTGRES_USER }} -d ${{ env.POSTGRES_DB }}"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Wait for Postgres to be ready
        run: |
          until pg_isready -h localhost -p 5432 -U $POSTGRES_USER -d $POSTGRES_DB; do sleep 1; done

      - name: Run shared migrations (django-tenants)
        env:
          DATABASE_URL: postgres://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}
        run: |
          python manage.py migrate_schemas --shared

      - name: (optional) Create public/test tenants required by tests
        run: |
          python - <<'PY'
          import os, django
          os.environ.setdefault('DJANGO_SETTINGS_MODULE','Django_TechYatra.settings.dev')
          django.setup()
          try:
              from customers.models import Client, Domain
              if not Client.objects.filter(schema_name='public').exists():
                  t = Client(schema_name='public', name='Public', paid_until=None, on_trial=False)
                  t.save()
                  Domain.objects.create(domain='localhost', tenant=t)
          except Exception as e:
              print("Tenant creation skipped or failed:", e)
          PY

      - name: Run Django tests
        run: python manage.py test

      - name: Build Docker image (no push)
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: ${{ github.repository }}:ci
